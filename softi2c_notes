arch dependent:
i2c_init -> no
i2c_idle -> YES
i2c_submit -> YES
i2c_setbitrate -> YES
i2c_event -> yes, but not linked to peripheral
i2c_transmit -> no
i2c_receive -> no
i2c_transceive -> no
i2c_blocking_transmit -> no
i2c_blocking_receive -> no
i2c_blocking_transceive -> no


conclusion:
i2c_idle -> YES
i2c_submit -> YES
i2c_setbitrate -> YES
i2c_event -> yes, but not linked to peripheral, add softi2c_event to mcu.c


SOLUTIONS:
1. add platform-dependent function pointers to i2c_periph struct and use these. -> set up current functions as inline, calling periph->fn. Hope compiler optimizes call. Set up function pointers in i2cX_hw_init (verified called by mcu_periph/i2c.c).
~~2. use #define i2c_idle(i2c0, ...) -> i2c0_idle(...) -> i2c_stm32_idle(i2c0, ...) to allow periph-specific handling without runtime or memory penalty!!! ==> not possible, called with _p = &i2c0~~
