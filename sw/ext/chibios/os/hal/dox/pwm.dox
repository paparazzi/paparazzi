/*
    ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
                 2011,2012,2013 Giovanni Di Sirio.

    This file is part of ChibiOS/RT.

    ChibiOS/RT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    ChibiOS/RT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

                                      ---

    A special exception to the GPL can be applied should you wish to distribute
    a combined work that includes ChibiOS/RT, without being obliged to provide
    the source code for any proprietary components. See the file exception.txt
    for full details of how and when the exception can be applied.
*/

/**
 * @defgroup PWM PWM Driver
 * @brief   Generic PWM Driver.
 * @details This module implements a generic PWM (Pulse Width Modulation)
 *          driver.
 * @pre     In order to use the PWM driver the @p HAL_USE_PWM option
 *          must be enabled in @p halconf.h.
 *
 * @section pwm_1 Driver State Machine
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true", width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];
    uninit [label="PWM_UNINIT", style="bold"];
    stop  [label="PWM_STOP\nLow Power"];
    ready [label="PWM_READY\nClock Enabled"];
    uninit -> stop [label="pwmInit()"];
    stop -> stop [label="pwmStop()"];
    stop -> ready [label="pwmStart()"];
    ready -> stop [label="pwmStop()"];
    ready -> ready [label="pwmEnableChannel()\npwmDisableChannel()"];
  }
 * @enddot
 *
 * @section pwm_2 PWM Operations.
 * This driver abstracts a generic PWM timer composed of:
 * - A clock prescaler.
 * - A main up counter.
 * - A comparator register that resets the main counter to zero when the limit
 *   is reached. An optional callback can be generated when this happens.
 * - An array of @p PWM_CHANNELS PWM channels, each channel has an output,
 *   a comparator and is able to invoke an optional callback when a comparator
 *   match with the main counter happens.
 * .
 * A PWM channel output can be in two different states:
 * - <b>IDLE</b>, when the channel is disabled or after a match occurred.
 * - <b>ACTIVE</b>, when the channel is enabled and a match didn't occur yet
 *   in the current PWM cycle.
 * .
 * Note that the two states can be associated to both logical zero or one in
 * the @p PWMChannelConfig structure.
 *
 * @ingroup IO
 */
