MCU_MODEL = STM32F407V(E-G)Tx
CHIBIOS_VERSION = 3.0

HEADER
/*
    ChibiOS/RT - Copyright (C) 2006-2013 Giovanni Di Sirio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/*
 * Board identifier.
 */
#define BOARD_ST_APOGEE
#define BOARD_NAME  "AB/GRZ STM32F4 Apogee 1.0"

/*
 * Board oscillators-related settings.
 * NOTE: LSE fitted.
 */
#if !defined(STM32_LSECLK)
#define STM32_LSECLK                32768
#endif

#if !defined(STM32_HSECLK)
#define STM32_HSECLK                16000000
#endif


/*
 * Board voltages.
 * Required for performance limits calculation.
 */
#define STM32_VDD                   300

/*
 * MCU type as defined in the ST header file stm32f4xx.h.
 */
#define STM32F407xx

/*
 * PAPARAZZI CONFIGURATION
 */


/*
 * Concat macro
 */
#define _CONCAT_BOARD_PARAM(_s1, _s2) _s1 ## _s2
#define CONCAT_BOARD_PARAM(_s1, _s2) _CONCAT_BOARD_PARAM(_s1, _s2)


/*
 * LEDs
 */
/* red, on PC0 */
#ifndef USE_LED_1
#define USE_LED_1 1
#endif
#define LED_1_GPIO GPIOC
#define LED_1_GPIO_PIN GPIO0
#define LED_1_GPIO_ON gpio_clear
#define LED_1_GPIO_OFF gpio_set

/* orange, on PC13 */
#ifndef USE_LED_2
#define USE_LED_2 1
#endif
#define LED_2_GPIO GPIOC
#define LED_2_GPIO_PIN GPIO13
#define LED_2_GPIO_ON gpio_clear
#define LED_2_GPIO_OFF gpio_set

/* green, on PC1 */
#ifndef USE_LED_3
#define USE_LED_3 1
#endif
#define LED_3_GPIO GPIOC
#define LED_3_GPIO_PIN GPIO1
#define LED_3_GPIO_ON gpio_clear
#define LED_3_GPIO_OFF gpio_set

/* yellow, on PC3 */
#ifndef USE_LED_4
#define USE_LED_4 1
#endif
#define LED_4_GPIO GPIOC
#define LED_4_GPIO_PIN GPIO3
#define LED_4_GPIO_ON gpio_clear
#define LED_4_GPIO_OFF gpio_set

/* AUX1, on PB1, 1 on LED_ON, 0 on LED_OFF */
#ifndef USE_LED_5
#define USE_LED_5 0
#endif
#define LED_5_GPIO GPIOB
#define LED_5_GPIO_PIN GPIO1
#define LED_5_GPIO_ON gpio_set
#define LED_5_GPIO_OFF gpio_clear

/* AUX2, on PC5, 1 on LED_ON, 0 on LED_OFF */
#ifndef USE_LED_6
#define USE_LED_6 0
#endif
#define LED_6_GPIO GPIOC
#define LED_6_GPIO_PIN GPIO5
#define LED_6_GPIO_ON gpio_set
#define LED_6_GPIO_OFF gpio_clear

/* AUX3, on PC4, 1 on LED_ON, 0 on LED_OFF */
#ifndef USE_LED_7
#define USE_LED_7 0
#endif
#define LED_7_GPIO GPIOC
#define LED_7_GPIO_PIN GPIO4
#define LED_7_GPIO_ON gpio_set
#define LED_7_GPIO_OFF gpio_clear

/* AUX4, on PB15, 1 on LED_ON, 0 on LED_OFF */
#ifndef USE_LED_8
#define USE_LED_8 0
#endif
#define LED_8_GPIO GPIOB
#define LED_8_GPIO_PIN GPIO15
#define LED_8_GPIO_ON gpio_set
#define LED_8_GPIO_OFF gpio_clear

/* Power Switch, on PB12 */
#define POWER_SWITCH_GPIO GPIOB,GPIO12

/* Pint to set Uart2 RX polarity, on PB13, output high inverts, low doesn't */
#define RC_POLARITY_GPIO_PORT GPIOB
#define RC_POLARITY_GPIO_PIN GPIO13

/*
 * ADCs
 */
// AUX 1
#if USE_ADC_1
#define AD1_1_CHANNEL ADC_CHANNEL_IN9
#define ADC_1 AD1_1
#define ADC_1_GPIO_PORT GPIOB
#define ADC_1_GPIO_PIN GPIO1
#endif

// AUX 2
#if USE_ADC_2
#define AD1_2_CHANNEL ADC_CHANNEL_IN15
#define ADC_2 AD1_2
#define ADC_2_GPIO_PORT GPIOC
#define ADC_2_GPIO_PIN GPIO5
#endif

// AUX 3
#if USE_ADC_3
#define AD1_3_CHANNEL ADC_CHANNEL_IN14
#define ADC_3 AD1_3
#define ADC_3_GPIO_PORT GPIOC
#define ADC_3_GPIO_PIN GPIO4
#endif

// Internal ADC for battery enabled by default
#ifndef USE_ADC_4
#define USE_ADC_4 1
#endif
#if USE_ADC_4
#define AD1_4_CHANNEL ADC_CHANNEL_IN4
#define ADC_4 AD1_4
#define ADC_4_GPIO_PORT GPIOA
#define ADC_4_GPIO_PIN GPIO4
#endif

/* allow to define ADC_CHANNEL_VSUPPLY in the airframe file*/
#ifndef ADC_CHANNEL_VSUPPLY
#define ADC_CHANNEL_VSUPPLY ADC_4
#endif

#define DefaultVoltageOfAdc(adc) (0.006185*adc)

/*
 * PWM defines
 */
#ifndef USE_PWM0
#define USE_PWM0 1
#endif
#if USE_PWM0
#define PWM_SERVO_0 0
#define PWM_SERVO_0_GPIO    PAL_PORT(LINE_SERVO0)
#define PWM_SERVO_0_PIN     PAL_PAD(LINE_SERVO0)
#define PWM_SERVO_0_AF      AF_LINE_SERVO0
#define PWM_SERVO_0_DRIVER  CONCAT_BOARD_PARAM(PWMD, SERVO0_TIM)
#define PWM_SERVO_0_CHANNEL (SERVO0_TIM_CH-1)
#define PWM_SERVO_0_CONF    CONCAT_BOARD_PARAM(pwmcfg, SERVO0_TIM)
#endif

#ifndef USE_PWM1
#define USE_PWM1 1
#endif
#if USE_PWM1
#define PWM_SERVO_1 1
#define PWM_SERVO_1_GPIO    PAL_PORT(LINE_SERVO1)
#define PWM_SERVO_1_PIN     PAL_PAD(LINE_SERVO1)
#define PWM_SERVO_1_AF      AF_LINE_SERVO1
#define PWM_SERVO_1_DRIVER  CONCAT_BOARD_PARAM(PWMD, SERVO1_TIM)
#define PWM_SERVO_1_CHANNEL (SERVO1_TIM_CH-1)
#define PWM_SERVO_1_CONF    CONCAT_BOARD_PARAM(pwmcfg, SERVO1_TIM)
#endif

#ifndef USE_PWM2
#define USE_PWM2 1
#endif
#if USE_PWM2
#define PWM_SERVO_2 2
#define PWM_SERVO_2_GPIO    PAL_PORT(LINE_SERVO2)
#define PWM_SERVO_2_PIN     PAL_PAD(LINE_SERVO2)
#define PWM_SERVO_2_AF      AF_LINE_SERVO2
#define PWM_SERVO_2_DRIVER  CONCAT_BOARD_PARAM(PWMD, SERVO2_TIM)
#define PWM_SERVO_2_CHANNEL (SERVO2_TIM_CH-1)
#define PWM_SERVO_2_CONF    CONCAT_BOARD_PARAM(pwmcfg, SERVO2_TIM)
#endif

#ifndef USE_PWM3
#define USE_PWM3 1
#endif
#if USE_PWM3
#define PWM_SERVO_3 3
#define PWM_SERVO_3_GPIO    PAL_PORT(LINE_SERVO3)
#define PWM_SERVO_3_PIN     PAL_PAD(LINE_SERVO3)
#define PWM_SERVO_3_AF      AF_LINE_SERVO3
#define PWM_SERVO_3_DRIVER  CONCAT_BOARD_PARAM(PWMD, SERVO3_TIM)
#define PWM_SERVO_3_CHANNEL (SERVO3_TIM_CH-1)
#define PWM_SERVO_3_CONF    CONCAT_BOARD_PARAM(pwmcfg, SERVO3_TIM)
#endif

#ifndef USE_PWM4
#define USE_PWM4 1
#endif
#if USE_PWM4
#define PWM_SERVO_4 4
#define PWM_SERVO_4_GPIO    PAL_PORT(LINE_SERVO4)
#define PWM_SERVO_4_PIN     PAL_PAD(LINE_SERVO4)
#define PWM_SERVO_4_AF      AF_LINE_SERVO4
#define PWM_SERVO_4_DRIVER  CONCAT_BOARD_PARAM(PWMD, SERVO4_TIM)
#define PWM_SERVO_4_CHANNEL (SERVO4_TIM_CH-1)
#define PWM_SERVO_4_CONF    CONCAT_BOARD_PARAM(pwmcfg, SERVO4_TIM)
#endif

#ifndef USE_PWM5
#define USE_PWM5 1
#endif
#if USE_PWM5
#define PWM_SERVO_5 5
#define PWM_SERVO_5_GPIO    PAL_PORT(LINE_SERVO5)
#define PWM_SERVO_5_PIN     PAL_PAD(LINE_SERVO5)
#define PWM_SERVO_5_AF      AF_LINE_SERVO5
#define PWM_SERVO_5_DRIVER  CONCAT_BOARD_PARAM(PWMD, SERVO5_TIM)
#define PWM_SERVO_5_CHANNEL (SERVO5_TIM_CH-1)
#define PWM_SERVO_5_CONF    CONCAT_BOARD_PARAM(pwmcfg, SERVO5_TIM)
#endif

#if USE_PWM6
#define PWM_SERVO_6 6
#define PWM_SERVO_6_GPIO    PAL_PORT(LINE_SERVO6)
#define PWM_SERVO_6_PIN     PAL_PAD(LINE_SERVO6)
#define PWM_SERVO_6_AF      AF_LINE_SERVO6
#define PWM_SERVO_6_DRIVER  CONCAT_BOARD_PARAM(PWMD, SERVO6_TIM)
#define PWM_SERVO_6_CHANNEL (SERVO6_TIM_CH-1)
#define PWM_SERVO_6_CONF    CONCAT_BOARD_PARAM(pwmcfg, SERVO6_TIM)
#endif

/**
 * DSHOT
 */
#ifndef DSHOT_TELEMETRY_DEV
#define DSHOT_TELEMETRY_DEV NULL
#endif
#ifndef USE_DSHOT_TIM2
#define USE_DSHOT_TIM2 1
#endif
#ifndef USE_DSHOT_TIM3
#define USE_DSHOT_TIM3 1
#endif
#if USE_DSHOT_TIM2 // Servo 1, 4, 5
#define DSHOT_SERVO_1 1
#define DSHOT_SERVO_1_GPIO GPIOA
#define DSHOT_SERVO_1_PIN GPIO2
#define DSHOT_SERVO_1_AF GPIO_AF1
#define DSHOT_SERVO_1_DRIVER DSHOTD2
#define DSHOT_SERVO_1_CHANNEL 2
#define DSHOT_SERVO_4 4
#define DSHOT_SERVO_4_GPIO GPIOB
#define DSHOT_SERVO_4_PIN GPIO3
#define DSHOT_SERVO_4_AF GPIO_AF1
#define DSHOT_SERVO_4_DRIVER DSHOTD2
#define DSHOT_SERVO_4_CHANNEL 1
#define DSHOT_SERVO_5 5
#define DSHOT_SERVO_5_GPIO GPIOA
#define DSHOT_SERVO_5_PIN GPIO15
#define DSHOT_SERVO_5_AF GPIO_AF1
#define DSHOT_SERVO_5_DRIVER DSHOTD2
#define DSHOT_SERVO_5_CHANNEL 0
#define DSHOT_CONF_TIM2 1
#define DSHOT_CONF2_DEF { \
  .dma_stream = STM32_PWM2_UP_DMA_STREAM,   \
  .dma_channel = STM32_PWM2_UP_DMA_CHANNEL, \
  .pwmp = &PWMD2,                           \
  .tlm_sd = DSHOT_TELEMETRY_DEV,            \
  .dma_buf = &dshot2DmaBuffer,              \
}
#endif
#if USE_DSHOT_TIM3 // Servo 0,2,3,6
#define DSHOT_SERVO_0 0
#define DSHOT_SERVO_0_GPIO GPIOB
#define DSHOT_SERVO_0_PIN GPIO0
#define DSHOT_SERVO_0_AF GPIO_AF2
#define DSHOT_SERVO_0_DRIVER DSHOTD3
#define DSHOT_SERVO_0_CHANNEL 2
#define DSHOT_SERVO_2 2
#define DSHOT_SERVO_2_GPIO GPIOB
#define DSHOT_SERVO_2_PIN GPIO5
#define DSHOT_SERVO_2_AF GPIO_AF2
#define DSHOT_SERVO_2_DRIVER DSHOTD3
#define DSHOT_SERVO_2_CHANNEL 1
#define DSHOT_SERVO_3 3
#define DSHOT_SERVO_3_GPIO GPIOB
#define DSHOT_SERVO_3_PIN GPIO4
#define DSHOT_SERVO_3_AF GPIO_AF2
#define DSHOT_SERVO_3_DRIVER DSHOTD3
#define DSHOT_SERVO_3_CHANNEL 0
#if USE_DSHOT6
// DSHOT6 on AUX1 pin, not activated by default
#define DSHOT_SERVO_6 6
#define DSHOT_SERVO_6_GPIO GPIOB
#define DSHOT_SERVO_6_PIN GPIO1
#define DSHOT_SERVO_6_AF GPIO_AF2
#define DSHOT_SERVO_6_DRIVER DSHOTD3
#define DSHOT_SERVO_6_CHANNEL 3
#endif
#define DSHOT_CONF_TIM3 1
#define DSHOT_CONF3_DEF { \
  .dma_stream = STM32_PWM3_UP_DMA_STREAM,   \
  .dma_channel = STM32_PWM3_UP_DMA_CHANNEL, \
  .pwmp = &PWMD3,                           \
  .tlm_sd = DSHOT_TELEMETRY_DEV,            \
  .dma_buf = &dshot3DmaBuffer,              \
}
#endif

/**
 * PPM radio defines
 */
#define RC_PPM_TICKS_PER_USEC 2
#define PPM_TIMER_FREQUENCY 2000000
#define PPM_CHANNEL ICU_CHANNEL_1
#define PPM_TIMER ICUD1

/*
 * Spektrum
 */

// shorter wait with chibios as the RTC oscillator takes longer to stabilize
#define SPEKTRUM_BIND_WAIT 30000

/* The line that is pulled low at power up to initiate the bind process
 * PB15: AUX4
 */
#define SPEKTRUM_BIND_PIN GPIO15
#define SPEKTRUM_BIND_PIN_PORT GPIOB

/* The line used to send the pulse train for the bind process
 * When using UART2 on Apogee, this as to be a different pin than the uart2 rx
 * Default pin for this is PA8: PPM_IN
 */
#ifndef SPEKTRUM_PRIMARY_BIND_CONF_PORT
#define SPEKTRUM_PRIMARY_BIND_CONF_PORT GPIOA
#define SPEKTRUM_PRIMARY_BIND_CONF_PIN GPIO8
#endif

/*
 * PWM input
 */
// PWM_INPUT 1 on PA8 (also PPM IN)
#define PWM_INPUT1_ICU            ICUD1
#define PWM_INPUT1_CHANNEL        ICU_CHANNEL_1
// PPM in (aka PA8) is used: not compatible with PPM RC receiver
#define PWM_INPUT1_GPIO_PORT      GPIOA
#define PWM_INPUT1_GPIO_PIN       GPIO8
#define PWM_INPUT1_GPIO_AF        GPIO_AF1

// PWM_INPUT 2 on PA2 (also SERVO 1)
#if (USE_PWM1 && USE_PWM_INPUT2)
#error "PW1 and PWM_INPUT2 are not compatible"
#endif
#define PWM_INPUT2_ICU            ICUD5
#define PWM_INPUT2_CHANNEL        ICU_CHANNEL_4
#define PWM_INPUT2_GPIO_PORT      GPIOA
#define PWM_INPUT2_GPIO_PIN       GPIO2
#define PWM_INPUT2_GPIO_AF        GPIO_AF2

/**
 * I2C defines
 */
#ifndef I2C1_CLOCK_SPEED
#define I2C1_CLOCK_SPEED 400000
#endif
#if I2C1_CLOCK_SPEED == 400000
#define I2C1_DUTY_CYCLE FAST_DUTY_CYCLE_2
#elif I2C1_CLOCK_SPEED == 100000
#define I2C1_DUTY_CYCLE STD_DUTY_CYCLE
#else
#error Invalid I2C1 clock speed
#endif
#define I2C1_CFG_DEF {        \
           OPMODE_I2C,        \
           I2C1_CLOCK_SPEED,  \
           I2C1_DUTY_CYCLE,   \
           }

#ifndef I2C2_CLOCK_SPEED
#define I2C2_CLOCK_SPEED 400000
#endif
#if I2C2_CLOCK_SPEED == 400000
#define I2C2_DUTY_CYCLE FAST_DUTY_CYCLE_2
#elif I2C2_CLOCK_SPEED == 100000
#define I2C2_DUTY_CYCLE STD_DUTY_CYCLE
#else
#error Invalid I2C2 clock speed
#endif
#define I2C2_CFG_DEF {        \
           OPMODE_I2C,        \
           I2C2_CLOCK_SPEED,  \
           I2C2_DUTY_CYCLE,   \
           }

/**
 * SPI Config
 */
#define SPI1_GPIO_AF GPIO_AF5
#define SPI1_GPIO_PORT_MISO GPIOA
#define SPI1_GPIO_MISO GPIO6
#define SPI1_GPIO_PORT_MOSI GPIOA
#define SPI1_GPIO_MOSI GPIO7
#define SPI1_GPIO_PORT_SCK GPIOA
#define SPI1_GPIO_SCK GPIO5

// SLAVE0 on SPI connector
#define SPI_SELECT_SLAVE0_PORT GPIOB
#define SPI_SELECT_SLAVE0_PIN GPIO9
// SLAVE1 on AUX1
#define SPI_SELECT_SLAVE1_PORT GPIOB
#define SPI_SELECT_SLAVE1_PIN GPIO1
// SLAVE2 on AUX2
#define SPI_SELECT_SLAVE2_PORT GPIOC
#define SPI_SELECT_SLAVE2_PIN GPIO5
// SLAVE3 on AUX3
#define SPI_SELECT_SLAVE3_PORT GPIOC
#define SPI_SELECT_SLAVE3_PIN GPIO4
// SLAVE4 on AUX4
#define SPI_SELECT_SLAVE4_PORT GPIOB
#define SPI_SELECT_SLAVE4_PIN GPIO15

/**
 * Baro
 *
 * Apparently needed for backwards compatibility
 * with the ancient onboard baro boards
 */
#ifndef USE_BARO_BOARD
#define USE_BARO_BOARD 1
#endif

/*
 * Actuators for fixedwing
 */
 /* Default actuators driver */
#define DEFAULT_ACTUATORS "modules/actuators/actuators_pwm.h"
#define ActuatorDefaultSet(_x,_y) ActuatorPwmSet(_x,_y)
#define ActuatorsDefaultInit() ActuatorsPwmInit()
#define ActuatorsDefaultCommit() ActuatorsPwmCommit()


/**
 * SDIO
 */
#define SDIO_D0_PORT GPIOC
#define SDIO_D0_PIN SDIO_D0
#define SDIO_D1_PORT GPIOC
#define SDIO_D1_PIN SDIO_D1
#define SDIO_D2_PORT GPIOC
#define SDIO_D2_PIN SDIO_D2
#define SDIO_D3_PORT GPIOC
#define SDIO_D3_PIN SDIO_D3
#define SDIO_CK_PORT GPIOC
#define SDIO_CK_PIN SDIO_CK
#define SDIO_CMD_PORT GPIOD
#define SDIO_CMD_PIN SDIO_CMD
#define SDIO_AF 12
// bat monitoring for file closing
#define SDLOG_BAT_ADC ADCD1
#define SDLOG_BAT_CHAN AD1_4_CHANNEL
// usb led status
#define SDLOG_USB_LED 4
#define SDLOG_USB_VBUS_PORT GPIOA
#define SDLOG_USB_VBUS_PIN GPIO9


/**
 * For WS2812PWM
 */
#define WS2812D1_GPIO GPIOA
#define WS2812D1_PIN GPIO8
#define WS2812D1_AF 1
#define WS2812D1_CFG_DEF { \
  .dma_stream = STM32_PWM1_UP_DMA_STREAM, \
  .dma_channel = STM32_PWM1_UP_DMA_CHANNEL, \
  .dma_priority = STM32_PWM1_UP_DMA_PRIORITY, \
  .pwm_channel = 0, \
  .pwmp = &PWMD1 \
}


CONFIG
# PIN NAME PERIPH_TYPE AF_NUMBER or
# PIN NAME FUNCTION PUSHPULL|OPENDRAIN PIN_SPEED PULLUP|PULLDOWN|FLOATING LEVEL_LOW|LEVEL_HIGH AF_NUMBER
# simplified config for INPUT and OUTPUT
# PIN NAME INPUT PULLUP|PULLDOWN|FLOATING
# PIN NAME OUTPUT PUSHPULL|OPENDRAIN PIN_SPEED PULLUP|PULLDOWN|FLOATING LEVEL_LOW|LEVEL_HIGH
#
# PIN_SPEED : SPEED_VERYLOW, SPEED_LOW, SPEED_MEDIUM, SPEED_HIGH
# PERIPH_TYPE : SYS, ADC, PWM, ICU, I2C, SPI, UART, OTG, ETH, SDIO, SDIOCK,
#
# SYSTEM
A13     SWDIO     SYS  AF:SYS_JTMS-SWDIO
A14     SWCLK     SYS  AF:SYS_JTCK-SWCLK
C14     OSC32_IN  SYS  AF:RCC_OSC32_IN
C15     OSC32_OUT SYS  AF:RCC_OSC32_OUT
H00     OSC_IN    SYS  AF:RCC_OSC_IN
H01     OSC_OUT   SYS  AF:RCC_OSC_OUT

DEFAULT                 INPUT   PUSHPULL SPEED_VERYLOW PULLDOWN LEVEL_LOW  AF0

# ACTIVE PINS
PA00  UART4_TX      UART    AF:UART4_TX
PA01  UART4_RX      UART    AF:UART4_RX
PA02  SERVO1        PWM     AF:TIM2_CH3 ()
PA03  UART2_RX      UART    AF:USART2_RX
PA04  ADC1_IN4      ADC     ADC1_IN4
PA05  SPI1_SCK      SPI     AF:SPI1_SCK
PA06  SPI1_MISO     SPI     AF:SPI1_MISO
PA07  SPI1_MOSI     SPI     AF:SPI1_MOSI
PA08  CU1_CH1       ICU     AF:TIM1_CH1
PA09  OTG_FS_VBUS   INPUT   PULLDOWN
PA10  USART1_RX     UART    AF:USART1_RX
PA11  OTG_FS_DM     OTG     AF:USB_OTG_FS_DM
PA12  OTG_FS_DP     OTG     AF:USB_OTG_FS_DP
PA15  SERVO5        PWM     AF:TIM2_CH1 ()


PB00  SERVO0        PWM         AF:TIM3_CH3 ()
PB01  SERVO6        PWM         AF:TIM3_CH4 ()
PB02  BOOT1         INPUT       FLOATING
PB03  SERVO4        PWM         AF:TIM2_CH2 ()
PB04  SERVO3        PWM         AF:TIM3_CH1 ()
PB05  SERVO2        PWM         AF:TIM3_CH2 ()
PB06  USART1_TX     UART        AF:USART1_TX
PB07  I2C1_SDA      I2C         AF:I2C1_SDA
PB08  I2C1_SCL      I2C         AF:I2C1_SCL
PB09  SPI1_CS       OUTPUT      PUSHPULL  SPEED_HIGH  LEVEL_HIGH
PB10  I2C2_SCL      I2C         AF:I2C2_SCL
PB11  I2C2_SDA      I2C         AF:I2C2_SDA
PB12  POWER_SWITCH  OUTPUT      PUSHPULL  SPEED_HIGH  LEVEL_HIGH
PB13  RX2_POL       OUTPUT      PUSHPULL  SPEED_HIGH  LEVEL_HIGH
PB14  SDIO_DETECT   INPUT       PULLUP
PB15  AUX4          INPUT       FLOATING


PC00  LED1          LED
PC01  LED3          LED
PC03  LED4          LED
PC04  AUX3          INPUT      FLOATING
PC05  AUX2          INPUT      FLOATING
PC06  USART6_TX     UART      AF:USART6_TX
PC07  USART6_RX     UART      AF:USART6_RX
PC08  SDIO_D0       SDIO      AF:SDIO_D0
PC09  SDIO_D1       SDIO      AF:SDIO_D1
PC10  SDIO_D2       SDIO      AF:SDIO_D2
PC11  SDIO_D3       SDIO      AF:SDIO_D3
PC12  SDIO_CK       SDIOCK    AF:SDIO_CK
PC13  LED2          LED


PD02  SDIO_CMD      SDIO      AF:SDIO_CMD

# GROUPS
GROUP   ENERGY_SAVE_INPUT   %NAME=~/^SERVO[0-9]+|AUX[0-9]+|LED[0-9]+|.*_CS$/
